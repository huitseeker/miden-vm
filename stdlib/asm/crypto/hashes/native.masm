#! Hashes the memory `start_addr` to `end_addr`.
#!
#! This requires that `end_addr=start_addr + 2n + 1`, otherwise the procedure will enter an infinite
#! loop. `end_addr` is not inclusive.
#!
#! Stack transition:
#! Input: [C, B, A, start_addr, end_addr, ...]
#! Output: [C', B', A', end_addr, end_addr ...]
#! Cycles: 4 + 3 * words, where `words` is the `start_addr - end_addr - 1`
#!
#! Where `A` is the capacity word that will be used by the hashing function, and `B'` the hash output.
proc.hash_even_memory_addresses
  dup.13 dup.13 neq  # (4 cycles )
  while.true
    mem_stream # (2 cycles)
    dup.13 dup.13 neq  # (4 cycles )
  end
end

#! Hashes the memory `start_addr` to `end_addr`, handles odd number of elements.
#!
#! This requires `end_addr > start_addr`, otherwise the procedure will enter an infinite loop.
#! `end_addr` is not inclusive.
#!
#! Stack transition:
#! Input: [start_addr, end_addr, ...]
#! Output: [H, ...]
#! Cycles:
#! even words: 44 cycles + 3 * words
#! odd words: 56 cycles + 3 * words
export.hash_memory
  # figure out if the range is for an odd number of words (9 cycles)
  dup.1 dup.1 sub is_odd
  # stack: [is_odd, start_addr, end_addr, ...]

  # make the start/end range even (4 cycles)
  movup.2 dup.1 sub
  # stack: [end_addr, is_odd, start_addr, ...]

  # move start_addr to the right stack position (1 cycles)
  movup.2
  # stack: [start_addr, end_addr, is_odd, ...]

  # prepare hasher state (12 cycles)
  dup.2 push.0.0.0 padw padw
  # stack: [A, B, C, start_addr, end_addr, is_odd, ...]

  # (4 + 3 * words cycles0
  exec.hash_even_memory_addresses

  # (1 cycles)
  movup.14

  # handle the odd element, if any (12 cycles)
  if.true
    # start_addr and end_addr are equal after calling `hash_even_memory_addresses`, and both point
    # to the last element. Load the last word (2 cycles)
    dup.13 mem_loadw

    # set the padding (9 cycles)
    swapw dropw push.1.0.0.0

    # (1 cycles)
    hperm
  end

  # drop the first rate word (4 cycles)
  dropw

  # save the hash result (1 cycles)
  swapw

  # drop the capacity word (4 cycles)
  dropw

  # drop start_addr/end_addr (4 cycles)
  movup.4 drop movup.4 drop
end
